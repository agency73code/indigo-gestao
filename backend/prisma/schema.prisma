generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model area_atuacao {
  id                     Int                      @id @default(autoincrement())
  nome                   String                   @db.VarChar(100)
  terapeuta_area_atuacao terapeuta_area_atuacao[]
}

model cargo {
  id              Int               @id @default(autoincrement())
  nome            String            @db.VarChar(100)
  terapeuta_cargo terapeuta_cargo[]
}

model cliente {
  id                  String                @id @db.Char(36)
  nome                String                @db.VarChar(150)
  data_nascimento     DateTime              @db.Date
  email_contato       String                @unique(map: "email_contato_UNIQUE") @db.VarChar(255)
  data_entrada        DateTime              @db.Date
  data_saida          DateTime?             @db.Date
  status              cliente_status        @default(ativo)
  perfil_acesso       String                @db.VarChar(20)
  senha               String?               @db.VarChar(255)
  token_redefinicao   String?               @db.Char(36)
  validade_token      DateTime?             @db.DateTime(0)
  criado_em           DateTime              @default(now()) @db.Timestamp(0)
  atualizado_em       DateTime              @updatedAt @db.Timestamp(0)
  cliente_endereco    cliente_endereco[]
  cliente_escola      cliente_escola[]
  cliente_responsavel cliente_responsavel[]
  pagamentos          pagamentos[]
  ocp                 ocp[]
  terapeuta           terapeuta_cliente[]

  @@index([nome], map: "nome_idx")
}

model cliente_endereco {
  id               Int           @id @default(autoincrement())
  cliente_id       String        @db.Char(36)
  endereco_id      Int
  tipo_endereco_id Int
  principal        Int           @default(0) @db.TinyInt
  criado_em        DateTime      @default(now()) @db.Timestamp(0)
  atualizado_em    DateTime      @updatedAt @db.Timestamp(0)
  tipo_endereco    tipo_endereco @relation(fields: [tipo_endereco_id], references: [id], onUpdate: NoAction, map: "fk_cliente_endereco_tipo_endereco1")
  cliente          cliente       @relation(fields: [cliente_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cliente_has_endereco_cliente1")
  endereco         endereco      @relation(fields: [endereco_id], references: [id], onUpdate: NoAction, map: "fk_cliente_has_endereco_endereco1")

  @@unique([cliente_id, endereco_id, tipo_endereco_id], map: "uk_cli_end_tipo")
  @@index([cliente_id, principal], map: "cliente_principal_idx")
  @@index([tipo_endereco_id], map: "fk_cliente_endereco_tipo_endereco1_idx")
  @@index([cliente_id], map: "fk_cliente_has_endereco_cliente1_idx")
  @@index([endereco_id], map: "fk_cliente_has_endereco_endereco1_idx")
}

model cliente_escola {
  id         Int     @id @default(autoincrement())
  cliente_id String  @db.Char(36)
  escola_id  Int
  cliente    cliente @relation(fields: [cliente_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cliente_has_escola_cliente1")
  escola     escola  @relation(fields: [escola_id], references: [id], onUpdate: NoAction, map: "fk_cliente_has_escola_escola1")

  @@unique([cliente_id, escola_id], map: "cliente_escola")
  @@index([cliente_id], map: "fk_cliente_has_escolas_cliente1_idx")
  @@index([escola_id], map: "fk_cliente_has_escolas_escola1_idx")
}

model cliente_responsavel {
  cliente_id      String                         @db.Char(36)
  responsaveis_id Int
  parentesco      cliente_responsavel_parentesco
  prioridade      Int                            @default(1) @db.TinyInt
  cliente         cliente                        @relation(fields: [cliente_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cliente_has_responsaveis_cliente1")
  responsaveis    responsaveis                   @relation(fields: [responsaveis_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cliente_has_responsaveis_responsaveis1")

  @@id([cliente_id, responsaveis_id])
  @@index([cliente_id], map: "fk_cliente_has_responsaveis_cliente1_idx")
  @@index([responsaveis_id], map: "fk_cliente_has_responsaveis_responsaveis1_idx")
  @@index([parentesco], map: "parentesco_idx")
}

model documentos_terapeuta {
  id              Int       @id @default(autoincrement())
  terapeuta_id    String    @db.Char(36)
  tipo_documento  String    @db.VarChar(50)
  caminho_arquivo String    @db.VarChar(255)
  data_upload     DateTime  @db.Date
  terapeuta       terapeuta @relation(fields: [terapeuta_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_documentos_terapeuta_terapeuta1")

  @@index([terapeuta_id], map: "fk_documentos_terapeuta_terapeuta1_idx")
}

model endereco {
  id                 Int                  @id @default(autoincrement())
  cep                String               @db.Char(8)
  logradouro         String               @db.VarChar(255)
  numero             String               @db.VarChar(10)
  bairro             String               @db.VarChar(100)
  cidade             String               @db.VarChar(100)
  uf                 String               @db.Char(2)
  complemento        String?              @db.VarChar(100)
  criado_em          DateTime             @default(now()) @db.Timestamp(0)
  atualizado_em      DateTime             @updatedAt @db.Timestamp(0)
  cliente_endereco   cliente_endereco[]
  escola_endereco    escola_endereco[]
  terapeuta_endereco terapeuta_endereco[]

  @@index([cep], map: "cep_idx")
  @@index([cidade, uf], map: "cidade_uf_idx")
}

model escola {
  id              Int                @id @default(autoincrement())
  tipo_escola     escola_tipo_escola
  nome            String             @db.VarChar(150)
  telefone        String             @db.VarChar(20)
  email           String             @db.VarChar(255)
  criado_em       DateTime           @default(now()) @db.Timestamp(0)
  atualizado_em   DateTime           @updatedAt @db.Timestamp(0)
  cliente_escola  cliente_escola[]
  escola_endereco escola_endereco[]
}

model escola_endereco {
  id               Int           @id @default(autoincrement())
  escola_id        Int
  endereco_id      Int
  tipo_endereco_id Int
  principal        Int           @default(0) @db.TinyInt
  criado_em        DateTime      @default(now()) @db.Timestamp(0)
  atualizado_em    DateTime      @updatedAt @db.Timestamp(0)
  tipo_endereco    tipo_endereco @relation(fields: [tipo_endereco_id], references: [id], onUpdate: NoAction, map: "fk_escola_endereco_tipo_endereco1")
  endereco         endereco      @relation(fields: [endereco_id], references: [id], onUpdate: NoAction, map: "fk_escola_has_endereco_endereco1")
  escola           escola        @relation(fields: [escola_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_escola_has_endereco_escola1")

  @@unique([escola_id, endereco_id, tipo_endereco_id], map: "uk_esc_end_tipo")
  @@index([escola_id, principal], map: "escola_principal_idx")
  @@index([tipo_endereco_id], map: "fk_escola_endereco_tipo_endereco1_idx")
  @@index([endereco_id], map: "fk_escola_has_endereco_endereco1_idx")
  @@index([escola_id], map: "fk_escola_has_endereco_escola1_idx")
}

model pagamento_contatos {
  contato_id    Int                          @id @default(autoincrement())
  pagamentos_id Int
  categoria     pagamento_contatos_categoria @default(geral)
  tipo          pagamento_contatos_tipo
  valor         String                       @db.VarChar(45)
  pagamentos    pagamentos                   @relation(fields: [pagamentos_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pagamento_contatos_pagamentos1")

  @@index([pagamentos_id], map: "fk_pagamento_contatos_pagamentos1_idx")
}

model pagamentos {
  id                   Int                     @id @default(autoincrement())
  cliente_id           String                  @db.Char(36)
  nome                 String?                 @db.VarChar(150)
  numero_carteirinha   String?                 @db.VarChar(50)
  tipo_sistema         pagamentos_tipo_sistema
  prazo_reembolso_dias Int?
  numero_processo      String?                 @db.VarChar(50)
  nome_advogado        String?                 @db.VarChar(150)
  valor_sessao         Decimal?                @db.Decimal(10, 2)
  criado_em            DateTime                @default(now()) @db.Timestamp(0)
  atualizado_em        DateTime                @updatedAt @db.Timestamp(0)
  pagamento_contatos   pagamento_contatos[]
  cliente              cliente                 @relation(fields: [cliente_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pagamentos_cliente1")

  @@index([cliente_id], map: "fk_pagamentos_cliente1_idx")
}

model responsaveis {
  id                  Int                   @id @default(autoincrement())
  nome                String                @db.VarChar(150)
  cpf                 String                @unique(map: "cpf_UNIQUE") @db.Char(11)
  telefone            String?               @db.VarChar(20)
  email               String?               @db.VarChar(255)
  criado_em           DateTime              @default(now()) @db.Timestamp(0)
  atualizado_em       DateTime              @updatedAt @db.Timestamp(0)
  cliente_responsavel cliente_responsavel[]

  @@index([nome], map: "nome_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model terapeuta {
  id                     String                   @id @db.Char(36)
  nome                   String                   @db.VarChar(255)
  cpf                    String                   @unique(map: "cpf_UNIQUE") @db.Char(11)
  data_nascimento        DateTime                 @db.Date
  telefone               String?                  @db.VarChar(20)
  celular                String                   @db.VarChar(20)
  foto_perfil            String?                  @db.VarChar(255)
  email                  String                   @unique(map: "email_UNIQUE") @db.VarChar(255)
  email_indigo           String                   @unique(map: "email_indigo_UNIQUE") @db.VarChar(255)
  possui_veiculo         terapeuta_possui_veiculo
  placa_veiculo          String?                  @db.VarChar(20)
  modelo_veiculo         String?                  @db.VarChar(50)
  banco                  String                   @db.VarChar(50)
  agencia                String                   @db.VarChar(20)
  conta                  String                   @db.VarChar(50)
  chave_pix              String?                  @db.VarChar(255)
  cnpj_empresa           String?                  @unique(map: "cnpj_empresa_UNIQUE") @db.VarChar(14)
  razao_social           String?                  @db.VarChar(191)
  graduacao              String?                  @db.VarChar(191)
  grad_instituicao       String?                  @db.VarChar(191)
  ano_formatura          String?                  @db.VarChar(4)
  pos_graduacao          String?                  @db.VarChar(191)
  pos_grad_instituicao   String?                  @db.VarChar(191)
  ano_pos_graduacao      String?                  @db.VarChar(4)
  cursos                 String?                  @db.Text
  data_entrada           DateTime                 @db.Date
  data_saida             DateTime?                @db.Date
  perfil_acesso          String                   @db.VarChar(20)
  atividade              terapeuta_atividade      @default(ativo)
  senha                  String?                  @db.VarChar(255)
  token_redefinicao      String?                  @db.Char(36)
  validade_token         DateTime?                @db.DateTime(0)
  criado_em              DateTime                 @default(now()) @db.Timestamp(0)
  atualizado_em          DateTime                 @updatedAt @db.Timestamp(0)
  documentos_terapeuta   documentos_terapeuta[]
  terapeuta_area_atuacao terapeuta_area_atuacao[]
  terapeuta_cargo        terapeuta_cargo[]
  terapeuta_endereco     terapeuta_endereco[]
  sessao                 sessao[]
  ocp                    ocp[]                    @relation("CriadorOcp")
  cliente                terapeuta_cliente[]

  @@index([atividade], map: "atividade_idx")
  @@index([nome], map: "nome_idx")
}

model terapeuta_area_atuacao {
  terapeuta_id    String       @db.Char(36)
  area_atuacao_id Int
  area_atuacao    area_atuacao @relation(fields: [area_atuacao_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_terapeuta_has_area_atuacao_area_atuacao1")
  terapeuta       terapeuta    @relation(fields: [terapeuta_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_terapeuta_has_area_atuacao_terapeuta")

  @@id([terapeuta_id, area_atuacao_id])
  @@index([area_atuacao_id], map: "fk_terapeuta_has_area_atuacao_area_atuacao1_idx")
  @@index([terapeuta_id], map: "fk_terapeuta_has_area_atuacao_terapeuta_idx")
}

model terapeuta_cargo {
  terapeuta_id    String    @db.Char(36)
  cargo_id        Int
  numero_conselho String?   @db.VarChar(50)
  data_entrada    DateTime  @db.Date
  data_saida      DateTime? @db.Date
  cargo           cargo     @relation(fields: [cargo_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_terapeuta_has_cargo_cargo1")
  terapeuta       terapeuta @relation(fields: [terapeuta_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_terapeuta_has_cargo_terapeuta1")

  @@id([terapeuta_id, cargo_id])
  @@index([cargo_id], map: "fk_terapeuta_has_cargo_cargo1_idx")
  @@index([terapeuta_id], map: "fk_terapeuta_has_cargo_terapeuta1_idx")
}

model terapeuta_endereco {
  id               Int           @id @default(autoincrement())
  terapeuta_id     String        @db.Char(36)
  endereco_id      Int
  tipo_endereco_id Int
  principal        Int           @default(0) @db.TinyInt
  criado_em        DateTime      @default(now()) @db.Timestamp(0)
  atualizado_em    DateTime      @updatedAt @db.Timestamp(0)
  tipo_endereco    tipo_endereco @relation(fields: [tipo_endereco_id], references: [id], onUpdate: NoAction, map: "fk_terapeuta_endereco_tipo_endereco1")
  endereco         endereco      @relation(fields: [endereco_id], references: [id], onUpdate: NoAction, map: "fk_terapeuta_has_endereco_endereco1")
  terapeuta        terapeuta     @relation(fields: [terapeuta_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_terapeuta_has_endereco_terapeuta1")

  @@unique([terapeuta_id, endereco_id, tipo_endereco_id], map: "uk_ter_end_tipo")
  @@index([tipo_endereco_id], map: "fk_terapeuta_endereco_tipo_endereco1_idx")
  @@index([endereco_id], map: "fk_terapeuta_has_endereco_endereco1_idx")
  @@index([terapeuta_id], map: "fk_terapeuta_has_endereco_terapeuta1_idx")
  @@index([terapeuta_id, principal], map: "terapeuta_principal_idx")
}

model tipo_endereco {
  id                 Int                  @id @default(autoincrement())
  tipo               String               @unique(map: "tipo_UNIQUE") @db.VarChar(30)
  cliente_endereco   cliente_endereco[]
  escola_endereco    escola_endereco[]
  terapeuta_endereco terapeuta_endereco[]
}

model sessao_trial {
  id                  Int                 @id @default(autoincrement())
  sessao_id           Int
  estimulos_ocp_id    Int
  ordem               Int
  resultado           String

  sessao              sessao              @relation(fields: [sessao_id], references: [id], onDelete: Cascade)
  estimulosOcp        estimulo_ocp        @relation(fields: [estimulos_ocp_id], references: [id], onDelete: Cascade)

  @@index([sessao_id])
  @@index([estimulos_ocp_id])
}

model sessao {
  id                  Int                 @id @default(autoincrement())
  ocp_id              Int
  terapeuta_id        String              @db.Char(36)
  data_criacao        DateTime            @default(now())
  resumo              String?
  criado_em           DateTime            @default(now()) @db.Timestamp(0)
  atualizado_em       DateTime            @updatedAt @db.Timestamp(0)

  ocp                 ocp                 @relation(fields: [ocp_id], references: [id], onDelete: Cascade)
  terapeuta           terapeuta           @relation(fields: [terapeuta_id], references: [id], onDelete: Restrict)
  trials              sessao_trial[]

  @@index([terapeuta_id, data_criacao])
  @@index([ocp_id])
}

model estimulo {
  id                  Int                 @id @default(autoincrement())
  nome                String
  descricao           String?

  ocps                estimulo_ocp[]
}

model estimulo_ocp {
  id                  Int                 @id @default(autoincrement())
  id_estimulo         Int
  id_ocp              Int

  estimulo            estimulo            @relation(fields: [id_estimulo], references: [id], onDelete: Cascade)
  ocp                 ocp                 @relation(fields: [id_ocp], references: [id], onDelete: Cascade)
  trials              sessao_trial[]
}

model ocp {
  id                  Int                 @id @default(autoincrement())
  cliente_id          String              @db.Char(36)
  criador_id          String              @db.Char(36)
  nome_programa       String
  criado_em           DateTime            @default(now()) @db.Timestamp(0)
  objetivo_programa   String?
  objetivo_descricao  String?
  dominio_criterio    String?
  observacao_geral    String?
  atualizado_em       DateTime            @updatedAt @db.Timestamp(0)

  cliente             cliente             @relation(fields: [cliente_id], references: [id], onDelete: Restrict)
  criador             terapeuta           @relation("CriadorOcp", fields: [criador_id], references: [id], onDelete: Restrict)
  sessoes             sessao[]
  estimulo_ocp        estimulo_ocp[]

  @@index([cliente_id])
  @@index([nome_programa])
}

model terapeuta_cliente {
  id                  Int                 @id @default(autoincrement())
  terapeuta_id        String              @db.Char(36)
  cliente_id          String              @db.Char(36)

  terapeuta           terapeuta           @relation(fields: [terapeuta_id], references: [id], onDelete: Cascade)
  cliente             cliente             @relation(fields: [cliente_id], references: [id], onDelete: Cascade)

  @@unique([terapeuta_id, cliente_id])
}

enum escola_tipo_escola {
  particular
  publica
}

enum cliente_responsavel_parentesco {
  mae
  pai
  responsavel_legal
  outro
}

enum pagamento_contatos_categoria {
  geral
  advogado
  outro
}

enum pagamento_contatos_tipo {
  telefone
  email
}

enum pagamentos_tipo_sistema {
  reembolso
  liminar
  particular
}

enum cliente_status {
  ativo
  inativo
}

enum terapeuta_possui_veiculo {
  sim
  nao
}

enum terapeuta_atividade {
  ativo
  inativo
}
