generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model area_atuacao {
  id                    Int                     @id @default(autoincrement())
  nome                  String                  @db.VarChar(100)
  registro_profissional registro_profissional[]
}

model cargo {
  id                    Int                     @id @default(autoincrement())
  nome                  String                  @db.VarChar(100)
  registro_profissional registro_profissional[]
}

model cliente {
  id                String              @id @default(uuid())
  nome              String?
  cpf               String?
  dataNascimento    DateTime?
  emailContato      String?             @unique
  dataEntrada       DateTime?
  dataSaida         DateTime?
  status            String?
  perfil_acesso     String?
  senha             String?
  token_redefinicao String?
  validade_token    DateTime?
  criado_em         DateTime            @default(now())
  atualizado_em     DateTime            @updatedAt
  arquivos          arquivos[]
  enderecos         cliente_endereco[]
  cuidadores        cuidador[]
  dadosEscola       dados_escola?
  dadosPagamento    dados_pagamento?
  ocp               ocp[]
  sessao            sessao[]
  terapeuta         terapeuta_cliente[]

  @@index([nome], map: "nome_idx")
}

model cuidador {
  id               Int       @id @default(autoincrement())
  relacao          String?
  descricaoRelacao String?
  nome             String?
  cpf              String    @unique @db.Char(11)
  profissao        String?
  escolaridade     String?
  telefone         String?
  email            String?
  clienteId        String
  enderecoId       Int?
  cliente          cliente   @relation(fields: [clienteId], references: [id])
  endereco         endereco? @relation(fields: [enderecoId], references: [id])

  @@unique([clienteId, cpf], name: "unique_cuidador")
  @@index([enderecoId], map: "cuidador_enderecoId_fkey")
}

model cliente_endereco {
  id              Int      @id @default(autoincrement())
  clienteId       String
  enderecoId      Int
  residenciaDe    String?
  outroResidencia String?
  cliente         cliente  @relation(fields: [clienteId], references: [id])
  endereco        endereco @relation(fields: [enderecoId], references: [id])

  @@index([clienteId], map: "cliente_endereco_clienteId_fkey")
  @@index([enderecoId], map: "cliente_endereco_enderecoId_fkey")
}

model dados_pagamento {
  id                Int      @id @default(autoincrement())
  clienteId         String   @unique
  nomeTitular       String?
  numeroCarteirinha String?
  telefone1         String?
  telefone2         String?
  telefone3         String?
  email1            String?
  email2            String?
  email3            String?
  sistemaPagamento  String
  prazoReembolso    String?
  numeroProcesso    String?
  nomeAdvogado      String?
  telefoneAdvogado1 String?
  telefoneAdvogado2 String?
  telefoneAdvogado3 String?
  emailAdvogado1    String?
  emailAdvogado2    String?
  emailAdvogado3    String?
  houveNegociacao   String?
  valorAcordado     String?
  criado_em         DateTime @default(now())
  atualizado_em     DateTime @updatedAt
  cliente           cliente  @relation(fields: [clienteId], references: [id])
}

model dados_escola {
  id         Int              @id @default(autoincrement())
  clienteId  String           @unique
  tipoEscola String
  nome       String?
  telefone   String?
  email      String?
  enderecoId Int?
  cliente    cliente          @relation(fields: [clienteId], references: [id])
  endereco   endereco?        @relation(fields: [enderecoId], references: [id])
  contatos   escola_contato[]

  @@index([enderecoId], map: "dados_escola_enderecoId_fkey")
}

model escola_contato {
  id            Int          @id @default(autoincrement())
  dadosEscolaId Int
  nome          String?
  telefone      String?
  email         String?
  funcao        String?
  dadosEscola   dados_escola @relation(fields: [dadosEscolaId], references: [id])

  @@index([dadosEscolaId], map: "escola_contato_dadosEscolaId_fkey")
}

model arquivos {
  id          Int        @id @default(autoincrement())
  clienteId   String?
  terapeutaId String?
  tipo        String?
  arquivo_id  String?
  mime_type   String?
  tamanho     Int?
  data_upload DateTime   @default(now())
  cliente     cliente?   @relation(fields: [clienteId], references: [id])
  terapeuta   terapeuta? @relation(fields: [terapeutaId], references: [id])

  @@index([tipo])
  @@index([clienteId], map: "arquivos_clienteId_fkey")
  @@index([terapeutaId], map: "arquivos_terapeutaId_fkey")
}

model endereco {
  id                 Int                @id @default(autoincrement())
  cep                String?            @db.Char(8)
  rua                String?            @db.VarChar(255)
  numero             String?            @db.VarChar(10)
  bairro             String?            @db.VarChar(100)
  cidade             String?            @db.VarChar(100)
  uf                 String?            @db.Char(2)
  complemento        String             @default("")
  criado_em          DateTime           @default(now())
  atualizado_em      DateTime           @updatedAt
  cliente_endereco   cliente_endereco[]
  cuidador           cuidador[]
  escola             dados_escola[]
  pessoa_juridica    pessoa_juridica[]
  terapeuta_endereco terapeuta[]

  @@unique([cep, rua, numero, bairro, cidade, uf, complemento], name: "unique_endereco")
  @@index([cep])
  @@index([cidade, uf])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model terapeuta {
  id                    String                  @id @default(uuid())
  nome                  String
  email                 String                  @unique
  email_indigo          String                  @unique
  celular               String
  telefone              String?
  cpf                   String                  @unique
  data_nascimento       DateTime
  possui_veiculo        Boolean                 @default(false)
  placa_veiculo         String?
  modelo_veiculo        String?
  banco                 String?
  agencia               String?
  conta                 String?
  chave_pix             String?
  pix_tipo              String?
  valor_hora            Decimal?                @db.Decimal(10, 2)
  professor_uni         Boolean                 @default(false)
  endereco_id           Int?
  data_entrada          DateTime
  data_saida            DateTime?
  perfil_acesso         String
  atividade             Boolean                 @default(true)
  senha                 String?                 @db.VarChar(255)
  token_redefinicao     String?
  validade_token        DateTime?
  criado_em             DateTime                @default(now())
  atualizado_em         DateTime                @updatedAt
  arquivos              arquivos[]
  formacao              formacao?
  ocp                   ocp[]                   @relation("CriadorOcp")
  pessoa_juridica       pessoa_juridica?
  registro_profissional registro_profissional[]
  sessao                sessao[]
  endereco              endereco?               @relation(fields: [endereco_id], references: [id])
  cliente               terapeuta_cliente[]
  disciplina            disciplina[]            @relation("disciplinaToterapeuta")
  supervisionados       vinculo_supervisao[]    @relation("SupervisorVinculo")
  supervisor            vinculo_supervisao[]    @relation("ClinicoVinculo")

  @@index([atividade])
  @@index([nome])
  @@index([endereco_id], map: "terapeuta_endereco_id_fkey")
}

model formacao {
  id                      Int             @id @default(autoincrement())
  graduacao               String?
  instituicao_graduacao   String?
  ano_formatura           Int?
  participacao_congressos String?         @db.Text
  publicacoes_descricao   String?         @db.Text
  terapeuta_id            String          @unique
  terapeuta               terapeuta       @relation(fields: [terapeuta_id], references: [id])
  pos_graduacao           pos_graduacao[]

  @@index([terapeuta_id], map: "formacao_terapeuta_id_fkey")
}

model pos_graduacao {
  id          Int      @id @default(autoincrement())
  tipo        String?
  curso       String?
  instituicao String?
  conclusao   String?
  formacao_id Int
  formacao    formacao @relation(fields: [formacao_id], references: [id])

  @@index([formacao_id], map: "pos_graduacao_formacao_id_fkey")
}

model registro_profissional {
  id              Int          @id @default(autoincrement())
  area_atuacao_id Int
  cargo_id        Int?
  numero_conselho String?
  terapeuta_id    String
  area_atuacao    area_atuacao @relation(fields: [area_atuacao_id], references: [id])
  cargo           cargo?       @relation(fields: [cargo_id], references: [id])
  terapeuta       terapeuta    @relation(fields: [terapeuta_id], references: [id])

  @@index([area_atuacao_id])
  @@index([cargo_id])
  @@index([terapeuta_id], map: "registro_profissional_terapeuta_id_fkey")
}

model pessoa_juridica {
  id           Int       @id @default(autoincrement())
  cnpj         String?   @unique
  razao_social String?
  endereco_id  Int
  terapeuta_id String    @unique
  endereco     endereco  @relation(fields: [endereco_id], references: [id])
  terapeuta    terapeuta @relation(fields: [terapeuta_id], references: [id])

  @@index([endereco_id], map: "pessoa_juridica_endereco_id_fkey")
}

model disciplina {
  id        Int         @id @default(autoincrement())
  nome      String      @unique
  terapeuta terapeuta[] @relation("disciplinaToterapeuta")
}

model sessao_trial {
  id               Int          @id @default(autoincrement())
  sessao_id        Int
  estimulos_ocp_id Int
  ordem            Int
  resultado        String
  estimulosOcp     estimulo_ocp @relation(fields: [estimulos_ocp_id], references: [id], onDelete: Cascade)
  sessao           sessao       @relation(fields: [sessao_id], references: [id], onDelete: Cascade)

  @@index([sessao_id])
  @@index([estimulos_ocp_id])
}

model sessao {
  id            Int            @id @default(autoincrement())
  ocp_id        Int
  cliente_id    String
  terapeuta_id  String
  data_criacao  DateTime       @default(now())
  criado_em     DateTime       @default(now())
  atualizado_em DateTime       @updatedAt
  cliente       cliente        @relation(fields: [cliente_id], references: [id])
  ocp           ocp            @relation(fields: [ocp_id], references: [id], onDelete: Cascade)
  terapeuta     terapeuta      @relation(fields: [terapeuta_id], references: [id])
  trials        sessao_trial[]

  @@index([terapeuta_id, data_criacao])
  @@index([ocp_id])
  @@index([cliente_id], map: "sessao_cliente_id_fkey")
}

model estimulo {
  id        Int            @id @default(autoincrement())
  nome      String         @unique
  descricao String?        @db.Text
  ocps      estimulo_ocp[]
}

model estimulo_ocp {
  id          Int            @id @default(autoincrement())
  id_estimulo Int
  id_ocp      Int
  nome        String?
  descricao   String?        @db.Text
  status      Boolean
  estimulo    estimulo       @relation(fields: [id_estimulo], references: [id], onDelete: Cascade)
  ocp         ocp            @relation(fields: [id_ocp], references: [id], onDelete: Cascade)
  trials      sessao_trial[]

  @@index([id_estimulo], map: "estimulo_ocp_id_estimulo_fkey")
  @@index([id_ocp], map: "estimulo_ocp_id_ocp_fkey")
}

model ocp {
  id                 Int            @id @default(autoincrement())
  cliente_id         String
  criador_id         String
  nome_programa      String
  criado_em          DateTime       @default(now())
  data_inicio        DateTime
  data_fim           DateTime
  objetivo_programa  String?
  objetivo_descricao String?        @db.Text
  dominio_criterio   String?        @db.Text
  observacao_geral   String?        @db.Text
  atualizado_em      DateTime       @updatedAt
  status             String         @default("active")
  estimulo_ocp       estimulo_ocp[]
  cliente            cliente        @relation(fields: [cliente_id], references: [id])
  criador            terapeuta      @relation("CriadorOcp", fields: [criador_id], references: [id])
  sessoes            sessao[]

  @@index([cliente_id])
  @@index([nome_programa])
  @@index([criador_id], map: "ocp_criador_id_fkey")
}

model terapeuta_cliente {
  id            Int       @id @default(autoincrement())
  terapeuta_id  String
  cliente_id    String
  papel         String    @default("responsible")
  status        String    @default("active")
  data_inicio   DateTime
  data_fim      DateTime?
  observacoes   String?   @db.Text
  area_atuacao  String?
  criado_em     DateTime  @default(now())
  atualizado_em DateTime  @updatedAt
  cliente       cliente   @relation(fields: [cliente_id], references: [id], onDelete: Cascade)
  terapeuta     terapeuta @relation(fields: [terapeuta_id], references: [id], onDelete: Cascade)

  @@index([terapeuta_id])
  @@index([cliente_id])
}

model vinculo_supervisao {
  id                Int       @id @default(autoincrement())
  supervisor_id     String
  clinico_id        String
  nivel_hierarquia  Int?      @default(1)
  escopo_supervisao String?   @default("direto") // 'direto' | 'equipe'
  data_inicio       DateTime
  data_fim          DateTime?
  status            String    @default("ativo")
  observacoes       String?
  criado_em         DateTime  @default(now())
  atualizado_em     DateTime  @updatedAt

  supervisor   terapeuta    @relation("SupervisorVinculo", fields: [supervisor_id], references: [id], onDelete: Cascade)
  clinico      terapeuta    @relation("ClinicoVinculo", fields: [clinico_id], references: [id], onDelete: Cascade)

  @@unique([supervisor_id, clinico_id])
  @@index([supervisor_id])
  @@index([clinico_id])
}
