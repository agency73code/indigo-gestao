generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model area_atuacao {
  id                     Int                      @id @default(autoincrement())
  nome                   String                   @db.VarChar(100)
}

model cargo {
  id              Int               @id @default(autoincrement())
  nome            String            @db.VarChar(100)
}

model cliente {
  id                  String                @id @default(uuid())
  nome                String?
  cpf                 String?
  dataNascimento      DateTime?
  emailContato        String?               @unique
  dataEntrada         DateTime?
  dataSaida           DateTime?
  status              String?
  perfil_acesso       String?
  senha               String?
  token_redefinicao   String?
  validade_token      DateTime?
  criado_em           DateTime              @default(now())
  atualizado_em       DateTime              @updatedAt

  cuidadores          cuidador[]
  enderecos           cliente_endereco[]
  dadosPagamento      dados_pagamento?
  dadosEscola         dados_escola?
  arquivos            arquivos[]
  ocp                 ocp[]
  terapeuta           terapeuta_cliente[]
  sessao              sessao[]

  @@index([nome], map: "nome_idx")
}

model cuidador {
  id                  Int                   @id @default(autoincrement())
  relacao             String?
  descricaoRelacao    String?
  nome                String?
  cpf                 String?               @db.Char(11)
  profissao           String?
  escolaridade        String?
  telefone            String?
  email               String?

  clienteId           String
  cliente             cliente               @relation(fields: [clienteId], references: [id])

  enderecoId          Int
  endereco            endereco?             @relation(fields: [enderecoId], references: [id])
}

model cliente_endereco {
  id             Int                        @id @default(autoincrement())

  clienteId      String
  cliente        cliente                    @relation(fields: [clienteId], references: [id])

  enderecoId     Int
  endereco       endereco                   @relation(fields: [enderecoId], references: [id])

  residenciaDe   String?
  outroResidencia String?
}

model dados_pagamento {
  id                  Int                   @id @default(autoincrement())
  clienteId           String                   @unique
  cliente             cliente               @relation(fields: [clienteId], references: [id])

  nomeTitular         String?
  numeroCarteirinha   String?
  telefone1           String?
  telefone2           String?
  telefone3           String?
  email1              String?
  email2              String?
  email3              String?
  sistemaPagamento    String
  prazoReembolso      String?
  numeroProcesso      String?
  nomeAdvogado        String?
  telefoneAdvogado1   String?
  telefoneAdvogado2   String?
  telefoneAdvogado3   String?
  emailAdvogado1      String?
  emailAdvogado2      String?
  emailAdvogado3      String?
  houveNegociacao     String?
  valorAcordado       String?

  criado_em           DateTime              @default(now())
  atualizado_em       DateTime              @updatedAt
}

model dados_escola {
  id                  Int                   @id @default(autoincrement())
  clienteId           String                @unique
  cliente             cliente               @relation(fields: [clienteId], references: [id])

  tipoEscola          String
  nome                String?
  telefone            String?
  email               String?
  enderecoId          Int?
  endereco            endereco?             @relation(fields: [enderecoId], references: [id])

  contatos            escola_contato[]
}

model escola_contato {
  id                  Int                   @id @default(autoincrement())
  dadosEscolaId       Int
  dadosEscola         dados_escola          @relation(fields: [dadosEscolaId], references: [id])

  nome                String?
  telefone            String?
  email               String?
  funcao              String?
}

model arquivos {
  id           Int                         @id @default(autoincrement())

  clienteId    String?
  cliente      cliente?  @relation(fields: [clienteId], references: [id])

  terapeutaId  String?
  terapeuta    terapeuta? @relation(fields: [terapeutaId], references: [id])
  
  tipo         String?                     // ex: "documentoIdentidade", "comprovanteCpf" etc.
  arquivo_id   String?                     // id retornado pelo serviço de storage (ex: Google Drive, S3)
  mime_type    String?                     // tipo MIME, ex: "image/png", "application/pdf"
  tamanho      Int?                        // tamanho em bytes
  data_upload  DateTime                    @default(now())

  // índices recomendados
  @@index([tipo])
}

model endereco {
  id                        Int                  @id @default(autoincrement())
  cep                       String?              @db.Char(8)
  rua                       String?              @db.VarChar(255)
  numero                    String?              @db.VarChar(10)
  bairro                    String?              @db.VarChar(100)
  cidade                    String?              @db.VarChar(100)
  uf                        String?              @db.Char(2)
  complemento               String?              @db.VarChar(100)
  criado_em                 DateTime             @default(now())
  atualizado_em             DateTime             @updatedAt
  terapeuta_endereco        terapeuta[]
  pessoa_juridica           pessoa_juridica[]
  cuidador                  cuidador[]
  escola                    dados_escola[]
  cliente_endereco cliente_endereco[]
  
  @@index([cep])
  @@index([cidade, uf])
  @@unique([cep, rua, numero, bairro, cidade, uf, complemento], name: "unique_endereco")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model terapeuta {
  id                     String                   @id @default(uuid())
  nome                   String
  email                  String                   @unique
  email_indigo           String                   @unique
  celular                String
  telefone               String?
  cpf                    String                   @unique
  data_nascimento        DateTime
  possui_veiculo         Boolean                  @default(false)
  placa_veiculo          String?
  modelo_veiculo         String?
  banco                  String?
  agencia                String?
  conta                  String?
  chave_pix              String?
  pix_tipo               String?
  valor_hora             Decimal?                 @db.Decimal(10, 2)
  professor_uni          Boolean                  @default(false)
  endereco_id            Int?
  data_entrada           DateTime
  data_saida             DateTime?
  perfil_acesso          String
  atividade              Boolean                  @default(true)
  senha                  String?                  @db.VarChar(255)
  token_redefinicao      String?
  validade_token         DateTime?
  criado_em              DateTime                 @default(now())
  atualizado_em          DateTime                 @updatedAt
  arquivos               arquivos[]
  registro_profissional  registro_profissional[]
  formacao               formacao[]
  endereco               endereco?                @relation(fields: [endereco_id], references: [id])
  pessoa_juridica        pessoa_juridica?
  disciplina             disciplina[]
  sessao                 sessao[]
  ocp                    ocp[]                    @relation("CriadorOcp")
  cliente                terapeuta_cliente[]

  @@index([atividade])
  @@index([nome])
}

model formacao {
  id                        Int                   @id @default(autoincrement())
  graduacao                 String?
  instituicao_graduacao     String?
  ano_formatura             Int?
  participacao_congressos   String?               @db.Text
  publicacoes_descricao     String?               @db.Text

  terapeuta_id              String
  terapeuta                 terapeuta             @relation(fields: [terapeuta_id], references: [id])
  pos_graduacao             pos_graduacao[]
}

model pos_graduacao {
  id                        Int                   @id @default(autoincrement())
  tipo                      String?
  curso                     String?
  instituicao               String?
  conclusao                 String?

  formacao_id               Int
  formacao                  formacao              @relation(fields: [formacao_id], references: [id])
}

model registro_profissional {
  id                    Int                       @id @default(autoincrement())
  area_atuacao          String
  cargo                 String?
  numero_conselho       String?
  terapeuta_id          String

  terapeuta             terapeuta                 @relation(fields: [terapeuta_id], references: [id])
  @@index([area_atuacao])
}

model pessoa_juridica {
  id                    Int                       @id @default(autoincrement())
  cnpj                  String?                    @unique
  razao_social          String?
  
  endereco_id           Int
  endereco              endereco?                 @relation(fields: [endereco_id], references: [id])

  terapeuta_id          String                    @unique
  terapeuta             terapeuta                 @relation(fields: [terapeuta_id], references: [id])
}

model disciplina {
  id          Int         @id @default(autoincrement())
  nome        String?
  terapeuta   terapeuta[]
}

model sessao_trial {
  id                  Int                 @id @default(autoincrement())
  sessao_id           Int
  estimulos_ocp_id    Int
  ordem               Int
  resultado           String

  sessao              sessao              @relation(fields: [sessao_id], references: [id], onDelete: Cascade)
  estimulosOcp        estimulo_ocp        @relation(fields: [estimulos_ocp_id], references: [id], onDelete: Cascade)

  @@index([sessao_id])
  @@index([estimulos_ocp_id])
}

model sessao {
  id                  Int                 @id @default(autoincrement())
  ocp_id              Int
  cliente_id          String
  terapeuta_id        String
  data_criacao        DateTime            @default(now())
  criado_em           DateTime            @default(now())
  atualizado_em       DateTime            @updatedAt

  ocp                 ocp                 @relation(fields: [ocp_id], references: [id], onDelete: Cascade)
  terapeuta           terapeuta           @relation(fields: [terapeuta_id], references: [id], onDelete: Restrict)
  cliente             cliente             @relation(fields: [cliente_id], references: [id], onDelete: Restrict)
  trials              sessao_trial[]

  @@index([terapeuta_id, data_criacao])
  @@index([ocp_id])
}

model estimulo {
  id                  Int                 @id @default(autoincrement())
  nome                String              @unique
  descricao           String?             @db.Text

  ocps                estimulo_ocp[]
}

model estimulo_ocp {
  id                  Int                 @id @default(autoincrement())
  id_estimulo         Int
  id_ocp              Int
  nome                String?
  descricao           String?             @db.Text
  status              Boolean

  estimulo            estimulo            @relation(fields: [id_estimulo], references: [id], onDelete: Cascade)
  ocp                 ocp                 @relation(fields: [id_ocp], references: [id], onDelete: Cascade)
  trials              sessao_trial[]
}

model ocp {
  id                  Int                 @id @default(autoincrement())
  cliente_id          String
  criador_id          String
  nome_programa       String
  criado_em           DateTime            @default(now())
  data_inicio         DateTime
  data_fim            DateTime
  objetivo_programa   String?
  objetivo_descricao  String?             @db.Text
  dominio_criterio    String?             @db.Text
  observacao_geral    String?             @db.Text
  atualizado_em       DateTime            @updatedAt
  status              String              @default("active")

  cliente             cliente             @relation(fields: [cliente_id], references: [id], onDelete: Restrict)
  criador             terapeuta           @relation("CriadorOcp", fields: [criador_id], references: [id], onDelete: Restrict)
  sessoes             sessao[]
  estimulo_ocp        estimulo_ocp[]

  @@index([cliente_id])
  @@index([nome_programa])
}

model terapeuta_cliente {
  id                  Int                 @id @default(autoincrement())
  terapeuta_id        String
  cliente_id          String
  papel               String              @default("responsible")
  status              String              @default("active")
  data_inicio         DateTime
  data_fim            DateTime?
  observacoes         String?             @db.Text
  area_atuacao        String?
  criado_em           DateTime            @default(now())
  atualizado_em       DateTime            @updatedAt

  terapeuta           terapeuta           @relation(fields: [terapeuta_id], references: [id], onDelete: Cascade)
  cliente             cliente             @relation(fields: [cliente_id], references: [id], onDelete: Cascade)

  @@index([terapeuta_id])
  @@index([cliente_id])
}
