name: Deploy STAGING

on:
  push:
    branches: [staging]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_KEY:  ${{ secrets.SSH_KEY }}
      STAGING_PATH: ${{ vars.STAGING_PATH }}
      PM2_APP:  ${{ secrets.PM2_APP_STAGING }}

    steps:
      - name: Checkout (for metadata only)
        uses: actions/checkout@v4

      - name: Deploy via SSH (STAGING)
        uses: appleboy/ssh-action@v1.0.3
        env:
          STAGING_PATH: ${{ vars.STAGING_PATH }}
          PM2_APP: ${{ secrets.PM2_APP_STAGING }}
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          envs: STAGING_PATH,PM2_APP,CI
          script: |
            exec sudo -u deploy -H bash -c "$0" "$@"
            set -euo pipefail
            echo "🚀 Deploy iniciado"
            echo "🔍 STAGING_PATH='$STAGING_PATH'"
            echo "🔍 PM2_APP='$PM2_APP'"

            if [[ "$STAGING_PATH" != *"/staging" ]]; then
              echo "❌ Caminho inválido: $STAGING_PATH"
              exit 1
            fi

            mkdir -p "$STAGING_PATH"
            chown -R "$USER:$USER" "$STAGING_PATH" || true
            git config --global --add safe.directory "$STAGING_PATH"

            # Clone inicial se necessário
            if [ ! -d "$STAGING_PATH/.git" ]; then
              git clone https://github.com/agency73code/indigo-gestao.git "$STAGING_PATH"
            fi

            # Atualiza branch
            cd "$STAGING_PATH"
            git fetch --all --prune
            git checkout staging
            git reset --hard origin/staging

            # pnpm via corepack (usa versão do projeto se houver packageManager)
            command -v pnpm >/dev/null 2>&1 || (corepack enable && corepack prepare pnpm@latest --activate)

            # Backend: deps (prod), migra e gera client via dlx (não precisa prisma como devDep local)
            cd backend
            pnpm install --frozen-lockfile --prod
            pnpm dlx prisma migrate deploy
            pnpm dlx prisma generate

            # Frontend: deps (com dev) e build
            cd ../frontend
            pnpm install --frozen-lockfile
            pnpm run build

            # PM2: restart ou start
            cd "$STAGING_PATH"
            if pm2 describe "$PM2_APP" > /dev/null; then
              pm2 restart "$PM2_APP"
            else
              if [ -f ecosystem.config.js ]; then
                pm2 start ecosystem.config.js --only "$PM2_APP" || pm2 start ecosystem.config.js
              else
                pm2 start backend/dist/server.js --name "$PM2_APP"
              fi
            fi

            pm2 save