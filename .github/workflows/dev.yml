name: Deploy DEV

on:
  push:
    branches: [dev]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_KEY:  ${{ secrets.SSH_KEY }}
      DEV_PATH: ${{ secrets.DEV_PATH }}
      PM2_APP:  ${{ secrets.PM2_APP_DEV }}

    steps:
      - name: Deploy via SSH (DEV)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_KEY }}
          envs: "DEV_PATH,PM2_APP"
          script: |
            set -euo pipefail
            echo "🚀 Deploy iniciado"
            echo "🔍 DEV_PATH='$DEV_PATH'"
            echo "🔍 PM2_APP='$PM2_APP'"
            export CI=true

            # garante pasta, dono e "safe.directory" para evitar o erro 128 do Git
            mkdir -p "$DEV_PATH"
            chown -R "$USER:$USER" "$DEV_PATH" || true
            git config --global --add safe.directory "$DEV_PATH"

            # 1) Clona se ainda não existir
            if [ ! -d "$DEV_PATH/.git" ]; then
              git clone https://github.com/agency73code/indigo-gestao.git "$DEV_PATH"
            fi

            # 2) Puxa código da branch dev
            cd "$DEV_PATH"
            git fetch --all --prune
            git checkout dev
            git reset --hard origin/dev

            command -v pnpm >/dev/null 2>&1 || (corepack enable && corepack prepare pnpm@latest --activate)

            # 3) Backend: deps + migrações
            cd backend

            # corrige dono e remove node_modules se estiver com permissões quebradas
            if [ -d node_modules ]; then
              sudo chown -R "$USER:$USER" node_modules || true
              rm -rf node_modules/.bin || true
            fi

            pnpm install --frozen-lockfile --prod
            pnpm dlx prisma migrate deploy
            pnpm dlx prisma generate

            # 4) Frontend: build
            cd ../frontend

            if [ -d node_modules ]; then
              sudo chown -R "$USER:$USER" node_modules || true
              rm -rf node_modules/.bin || true
            fi

            pnpm install --frozen-lockfile
            pnpm run build

            # 5) PM2
            cd "$DEV_PATH"
            if pm2 describe "$PM2_APP" > /dev/null; then
              pm2 restart "$PM2_APP"
            else
              if [ -f ecosystem.config.js ]; then
                pm2 start ecosystem.config.js --only "$PM2_APP" || pm2 start ecosystem.config.js
              else
                pm2 start backend/dist/server.js --name "$PM2_APP"
              fi
            fi

            pm2 save

